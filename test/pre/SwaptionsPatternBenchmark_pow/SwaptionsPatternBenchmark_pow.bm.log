# JMH version: 1.35
# VM version: JDK 18.0.2, OpenJDK 64-Bit Server VM, 18.0.2+0
# VM invoker: /usr/lib/jvm/java-18-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: jvbench.swaptions.SwaptionsPatternBenchmark.pow

# Run progress: 0.00% complete, ETA 00:08:20
# Fork: 1 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.423 ops/s
# Warmup Iteration   2: 0.446 ops/s
# Warmup Iteration   3: 0.424 ops/s
# Warmup Iteration   4: 0.423 ops/s
# Warmup Iteration   5: 0.434 ops/s
Iteration   1: 0.436 ops/s
Iteration   2: 0.460 ops/s
Iteration   3: 0.468 ops/s
Iteration   4: 0.475 ops/s
Iteration   5: 0.449 ops/s

# Run progress: 20.00% complete, ETA 00:07:47
# Fork: 2 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.410 ops/s
# Warmup Iteration   2: 0.422 ops/s
# Warmup Iteration   3: 0.430 ops/s
# Warmup Iteration   4: 0.424 ops/s
# Warmup Iteration   5: 0.435 ops/s
Iteration   1: 0.430 ops/s
Iteration   2: 0.432 ops/s
Iteration   3: 0.428 ops/s
Iteration   4: 0.430 ops/s
Iteration   5: 0.430 ops/s

# Run progress: 40.00% complete, ETA 00:05:52
# Fork: 3 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.413 ops/s
# Warmup Iteration   2: 0.433 ops/s
# Warmup Iteration   3: 0.432 ops/s
# Warmup Iteration   4: 0.432 ops/s
# Warmup Iteration   5: 0.433 ops/s
Iteration   1: 0.439 ops/s
Iteration   2: 0.437 ops/s
Iteration   3: 0.433 ops/s
Iteration   4: 0.438 ops/s
Iteration   5: 0.432 ops/s

# Run progress: 60.00% complete, ETA 00:03:54
# Fork: 4 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.419 ops/s
# Warmup Iteration   2: 0.427 ops/s
# Warmup Iteration   3: 0.443 ops/s
# Warmup Iteration   4: 0.434 ops/s
# Warmup Iteration   5: 0.429 ops/s
Iteration   1: 0.441 ops/s
Iteration   2: 0.428 ops/s
Iteration   3: 0.432 ops/s
Iteration   4: 0.442 ops/s
Iteration   5: 0.429 ops/s

# Run progress: 80.00% complete, ETA 00:01:56
# Fork: 5 of 5
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 0.409 ops/s
# Warmup Iteration   2: 0.427 ops/s
# Warmup Iteration   3: 0.430 ops/s
# Warmup Iteration   4: 0.431 ops/s
# Warmup Iteration   5: 0.470 ops/s
Iteration   1: 0.441 ops/s
Iteration   2: 0.467 ops/s
Iteration   3: 0.471 ops/s
Iteration   4: 0.466 ops/s
Iteration   5: 0.460 ops/s


Result "jvbench.swaptions.SwaptionsPatternBenchmark.pow":
  0.444 ±(99.9%) 0.012 ops/s [Average]
  (min, avg, max) = (0.428, 0.444, 0.475), stdev = 0.016
  CI (99.9%): [0.432, 0.456] (assumes normal distribution)


# Run complete. Total time: 00:09:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                       Mode  Cnt  Score   Error  Units
SwaptionsPatternBenchmark.pow  thrpt   25  0.444 ± 0.012  ops/s
